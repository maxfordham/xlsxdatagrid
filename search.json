[
  {
    "objectID": "examples/many-sheets.html",
    "href": "examples/many-sheets.html",
    "title": "many sheets",
    "section": "",
    "text": "Notecode\n\n\n\n\n\nimport pathlib\nimport typing as ty\nfrom datetime import date, datetime, time, timedelta\nfrom enum import StrEnum\nfrom pydantic import (\n    BaseModel,\n    ConfigDict,\n    Field,\n    NaiveDatetime,\n    # NaiveDate,\n    RootModel,\n    StringConstraints,\n    computed_field,\n)\nfrom typing_extensions import Annotated\nfrom xlsxdatagrid.xlsxdatagrid import (\n    convert_dict_arrays_to_list_records,\n    from_pydantic_objects\n)\n\nfrom xlsxdatagrid.demo_schemas.dtypes import (\n    MyColor,\n    DataTypes,\n    DataTypesBasicFields,\n    DataTypesArray,\n    DataTypesArrayTransposed\n)\n\nARRAY_DATA = {\n    \"a_int\": [1, 2, 3],\n    \"a_constrainedint\": [3, 3, 3],\n    \"b_float\": [1.5, 2.5, 3.5],\n    \"c_str\": [\"string\", \"asdf\", \"bluey\"],\n    \"c_constrainedstr\": [\"string\", \"string\", \"string\"],\n    \"d_enum\": [\"green\", \"green\", \"blue\"],\n    \"e_bool\": [True, True, False],\n    \"f_date\": [\"2024-06-06\", \"2024-06-06\", \"2024-06-06\"],\n    \"g_datetime\": [\n        \"2024-06-06T10:08:52.078770\",\n        \"2024-06-06T10:08:52.078770\",\n        \"2024-06-06T10:08:52.078770\",\n    ],\n    \"h_time\": [\"10:08:52.078959\", \"10:08:52.078959\", \"10:08:52.078959\"],\n    \"i_duration\": [\"PT2H33M3S\", \"PT2H33M3S\", \"PT2H33M3S\"],\n    \"b_calcfloat\": [1.5, 5.0, 10.5],\n}\n\nARRAY_DATA1 = {k: v * 2 for k, v in ARRAY_DATA.items() if k in DataTypesBasicFields.model_fields}\n\npyd_obj = DataTypesArrayTransposed(convert_dict_arrays_to_list_records(ARRAY_DATA))\npyd_obj1 = DataTypesArray(convert_dict_arrays_to_list_records(ARRAY_DATA1))\nimport xlsxdatagrid as xdg\nfpth = pathlib.Path(\"tests/xl/test-many-sheets.xlsx\")\nfrom_pydantic_objects([pyd_obj, pyd_obj1], fpth)\nprint(fpth, fpth.is_file())\n#&gt; tests/xl/test-many-sheets.xlsx True",
    "crumbs": [
      "Home",
      "Many Sheets"
    ]
  },
  {
    "objectID": "examples/from-schema.html",
    "href": "examples/from-schema.html",
    "title": "report-a4-p",
    "section": "",
    "text": "Notecode\n\n\n\n\n\nimport pathlib\nimport typing as ty\nfrom datetime import date, datetime, time, timedelta\nfrom enum import StrEnum\nfrom pydantic import (\n    BaseModel,\n    ConfigDict,\n    Field,\n    NaiveDatetime,\n    # NaiveDate,\n    RootModel,\n    StringConstraints,\n    computed_field,\n)\nfrom typing_extensions import Annotated\n\nfrom xlsxdatagrid.demo_schemas.dtypes import MyColor, DataTypes, DataTypesArray\n\nt1, t2, t3 = (\n    DataTypes(d_enum=MyColor.GREEN),\n    DataTypes(a_int=2, b_float=2.5, c_str=\"asdf\", d_enum=MyColor.GREEN),\n    DataTypes(a_int=3, b_float=3.5, c_str=\"bluey\", d_enum=MyColor.BLUE, e_bool=False),\n)\nt_array = DataTypesArray([t1, t2, t3])\nimport xlsxdatagrid as xdg\nfpth = pathlib.Path(\"tests/xl/test.xlsx\")\nxdg.from_pydantic_object(t_array, fpth)\nprint(fpth, fpth.is_file())\n#&gt; tests/xl/test.xlsx True",
    "crumbs": [
      "Home",
      "From Schema"
    ]
  },
  {
    "objectID": "examples/from-schema-t.html",
    "href": "examples/from-schema-t.html",
    "title": "report-a4-p Transposed",
    "section": "",
    "text": "Notecode\n\n\n\n\n\nimport pathlib\nimport typing as ty\nfrom datetime import date, datetime, time, timedelta\nfrom enum import StrEnum\nfrom pydantic import (\n    BaseModel,\n    ConfigDict,\n    Field,\n    NaiveDatetime,\n    # NaiveDate,\n    RootModel,\n    StringConstraints,\n    computed_field,\n)\nfrom typing_extensions import Annotated\n\nfrom xlsxdatagrid.demo_schemas.dtypes import (\n    MyColor,\n    DataTypes,\n    DataTypesArrayTransposed\n)\n\nt1, t2, t3 = (\n    DataTypes(d_enum=MyColor.GREEN),\n    DataTypes(a_int=2, b_float=2.5, c_str=\"asdf\", d_enum=MyColor.GREEN),\n    DataTypes(a_int=3, b_float=3.5, c_str=\"bluey\", d_enum=MyColor.BLUE, e_bool=False),\n)\nt_array = DataTypesArrayTransposed([t1, t2, t3])\nimport xlsxdatagrid as xdg\nfpth = pathlib.Path(\"tests/xl/test-t.xlsx\")\nxdg.from_pydantic_object(t_array, fpth)\nprint(fpth, fpth.is_file())\n#&gt; tests/xl/test-t.xlsx True",
    "crumbs": [
      "Home",
      "From Schema Transposed"
    ]
  },
  {
    "objectID": "examples/chart.html",
    "href": "examples/chart.html",
    "title": "chart",
    "section": "",
    "text": "Notecode\n\n\n\n\n\nimport pathlib\nimport typing as ty\nfrom datetime import date, datetime, time, timedelta\nfrom enum import StrEnum\nfrom pydantic import (\n    BaseModel,\n    ConfigDict,\n    Field,\n    NaiveDatetime,\n    # NaiveDate,\n    RootModel,\n    StringConstraints,\n    computed_field,\n)\nfrom typing_extensions import Annotated\nfrom xlsxdatagrid.xlsxdatagrid import (\n    wb_from_dataframe,\n    wb_from_dataframes,\n)\nimport pandas as pd\n\ndef x_squared():\n    x = range(-5, 6)\n    y = [_**2 for _ in x]\n    return pd.DataFrame({\"x\": x, \"y\": y})\n\nfpth = pathlib.Path(\"tests/xl/chart.xlsx\")\ndf = x_squared()\n\nworkbook, xl_tbl, worksheet = wb_from_dataframe(df, fpth)\n\nchart = workbook.add_chart({\"type\": \"line\"})\n\nchart.add_series(\n    {\n        \"name\": \"x squared\",\n        \"categories\": [worksheet.name] + list(xl_tbl.rng_arrays[\"x\"]),\n        \"values\": [worksheet.name] + list(xl_tbl.rng_arrays[\"y\"]),\n    }\n)\n\n# Add a chart title and some axis labels.\nchart.set_title({\"name\": \"x squared\"})\nchart.set_x_axis({\"name\": \"x\"})\nchart.set_y_axis({\"name\": \"y\"})\n\n# Set an Excel chart style.\nchart.set_style(11)\n\n# Add the chart to the chartsheet.\ndepth = xl_tbl.gridschema.header_depth + 4\nwidth = len(xl_tbl.gridschema.fields) + 2\nworksheet.insert_chart(depth, width, chart)\nworkbook.close()\n\nprint(fpth, fpth.is_file())\n#&gt; tests/xl/chart.xlsx True",
    "crumbs": [
      "Home",
      "Chart"
    ]
  }
]